version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: federated_imputation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: user_management_db,service_registry_db,job_processing_db,file_management_db,notification_db,monitoring_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - microservices-network

  # Microservices
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - USER_SERVICE_URL=http://user-service:8001
      - SERVICE_REGISTRY_URL=http://service-registry:8002
      - JOB_PROCESSOR_URL=http://job-processor:8003
      - FILE_MANAGER_URL=http://file-manager:8004
      - NOTIFICATION_URL=http://notification:8005
      - MONITORING_URL=http://monitoring:8006
    depends_on:
      - redis
      - user-service
      - service-registry
      - job-processor
      - file-manager
      - notification
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/user_management_db
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  service-registry:
    build:
      context: ./microservices/service-registry
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/service_registry_db
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  job-processor:
    build:
      context: ./microservices/job-processor
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/job_processing_db
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:8001
      - SERVICE_REGISTRY_URL=http://service-registry:8002
      - FILE_MANAGER_URL=http://file-manager:8004
      - NOTIFICATION_URL=http://notification:8005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  file-manager:
    build:
      context: ./microservices/file-manager
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/file_management_db
      - STORAGE_PATH=/app/storage
      - MAX_FILE_SIZE_MB=500
    volumes:
      - file_storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  notification:
    build:
      context: ./microservices/notification
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/notification_db
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST:-localhost}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  monitoring:
    build:
      context: ./microservices/monitoring
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/monitoring_db
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:8001
      - SERVICE_REGISTRY_URL=http://service-registry:8002
      - JOB_PROCESSOR_URL=http://job-processor:8003
      - FILE_MANAGER_URL=http://file-manager:8004
      - NOTIFICATION_URL=http://notification:8005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.microservices
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000/api
      - REACT_APP_WS_URL=ws://localhost:8005/ws
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  # Background Workers
  celery-worker:
    build:
      context: ./microservices/job-processor
      dockerfile: Dockerfile.worker
      dockerfile: Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/job_processing_db
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:8001
      - SERVICE_REGISTRY_URL=http://service-registry:8002
      - FILE_MANAGER_URL=http://file-manager:8004
      - NOTIFICATION_URL=http://notification:8005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A worker worker --loglevel=info --concurrency=4
    networks:
      - microservices-network

  celery-beat:
    build:
      context: ./microservices/job-processor
      dockerfile: Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/job_processing_db
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:8001
      - SERVICE_REGISTRY_URL=http://service-registry:8002
      - FILE_MANAGER_URL=http://file-manager:8004
      - NOTIFICATION_URL=http://notification:8005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A worker beat --loglevel=info
    networks:
      - microservices-network

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - microservices-network

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - microservices-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - microservices-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - microservices-network

volumes:
  postgres_data:
  redis_data:
  file_storage:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  microservices-network:
    driver: bridge
